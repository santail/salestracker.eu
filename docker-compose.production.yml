version: '3.7'
services:
          
  web-admin:
    container_name: web-admin
    build:
      context: ./salestracker.eu-admin/
      dockerfile: Dockerfile.production
    ports:
      - "8000:8000"
    volumes:
      - ./salestracker.eu-admin/:/usr/src/app/
      - ./.data/uploads/:/usr/src/app/uploads/
      - web-admin-modules:/usr/src/app/node_modules # will statically map node_modules folder to container. Should clean-up on each package.json change with docker rm -v containerId
      - web-admin-public:/usr/src/app/public/lib # will statically map public/lib folder to container. Should clean-up on each bower.json change with docker rm -v containerId
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - MONGODB_URI=mongodb://${APP_WEB_ADMIN_MONGO_USER}:${APP_WEB_ADMIN_MONGO_PASSWORD}@mongodb:27017/salestracker
      - PORT=8000
      - REDIS_ADDR=redis
      - REDIS_PORT=6379
      - NODE_ENV=production
    links:
      - "server-elasticsearch:elasticsearch"
      - "server-mongodb:mongodb"
      - "server-redis:redis"
    depends_on:
      - server-elasticsearch
      - server-mongodb
      - server-redis
    restart: on-failure
    networks:
      - networks-backend-elasticsearch
      - networks-backend-mongodb
      - networks-backend-redis

  web-public:
    container_name: web-public
    build:
      context: ./salestracker.eu-public/
      dockerfile: Dockerfile.production
    ports:
      - "9000:9000"
    volumes:
      - ./salestracker.eu-public/:/usr/src/app/
      - ./.data/uploads/:/usr/src/app/uploads/
      - web-public-modules:/usr/src/app/node_modules # will statically map node_modules folder to container. Should clean-up on each package.json change with docker rm -v containerId
      - web-public-public:/usr/src/app/public/lib # will statically map public/lib folder to container. Should clean-up on each bower.json change with docker rm -v containerId
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - MONGODB_URI=mongodb://${APP_WEB_PUBLIC_MONGO_USER}:${APP_WEB_PUBLIC_MONGO_PASSWORD}@mongodb:27017/salestracker
      - PORT=9000
      - REDIS_ADDR=redis
      - REDIS_PORT=6379
      - NODE_ENV=production
    links:
      - "server-elasticsearch:elasticsearch"
      - "server-mongodb:mongodb"
      - "server-redis:redis"

  salestracker.eu-finder:
    container_name: salestracker.eu-finder
    image: salestracker/salestracker.eu-finder:latest
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - MONGODB_URI=mongodb://${APP_BACKEND_FINDER_MONGO_USER}:${APP_BACKEND_FINDER_MONGO_PASSWORD}@mongodb:27017/salestracker
      - REDIS_ADDR=redis
      - REDIS_PORT=6379
      - NODE_ENV=production
    links:
      - "server-elasticsearch:elasticsearch"
      - "server-mongodb:mongodb"
      - "server-redis:redis"
    depends_on:
      - server-elasticsearch
      - server-mongodb
      - server-redis
      - salestracker.eu-processor
    restart: always
    networks:
      - networks-backend-elasticsearch
      - networks-backend-mongodb
      - networks-backend-redis

  salestracker.eu-harvester:
    container_name: salestracker.eu-harvester
    image: salestracker/salestracker.eu-harvester:latest
    volumes:
      - ./.data/uploads/:/usr/src/app/uploads/
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - MONGODB_URI=mongodb://${APP_BACKEND_HARVESTER_MONGO_USER}:${APP_BACKEND_HARVESTER_MONGO_PASSWORD}@mongodb:27017/salestracker
      - REDIS_ADDR=redis
      - REDIS_PORT=6379
      - NODE_ENV=production
    links:
      - "server-elasticsearch:elasticsearch"
      - "server-mongodb:mongodb"
      - "server-redis:redis"
    depends_on:
      - server-elasticsearch
      - server-mongodb
      - server-redis
      - salestracker.eu-processor
    restart: always
    networks:
      - networks-backend-elasticsearch
      - networks-backend-mongodb
      - networks-backend-redis

  backend-janitor:
    container_name: backend-janitor
    build:
      context: ./salestracker.eu-janitor/
      dockerfile: Dockerfile.production
    volumes:
      - ./salestracker.eu-janitor/:/usr/src/app/
      - ./salestracker.eu-shared/config/:/usr/src/app/config/
      - ./salestracker.eu-shared/lib/:/usr/src/app/lib/
      - backend-janitor-modules:/usr/src/app/node_modules
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - MONGODB_URI=mongodb://${APP_BACKEND_JANITOR_MONGO_USER}:${APP_BACKEND_JANITOR_MONGO_PASSWORD}@mongodb:27017/salestracker
      - REDIS_ADDR=redis
      - REDIS_PORT=6379
      - NODE_ENV=production
    links:
      - "server-elasticsearch:elasticsearch"
      - "server-mongodb:mongodb"
      - "server-redis:redis"
    depends_on:
      - server-elasticsearch
      - server-mongodb
      - server-redis
      - salestracker.eu-processor
    restart: on-failure    
    networks:
      - networks-backend-elasticsearch
      - networks-backend-mongodb
      - networks-backend-redis

  backend-notifier:
    container_name: backend-notifier
    build:
      context: ./salestracker.eu-notifier/
      dockerfile: Dockerfile.production
    volumes:
      - ./salestracker.eu-notifier/:/usr/src/app/
      - ./salestracker.eu-shared/config/:/usr/src/app/config/
      - ./salestracker.eu-shared/lib/:/usr/src/app/lib/
      - backend-notifier-modules:/usr/src/app/node_modules
    environment:
      - MONGODB_URI=mongodb://${APP_BACKEND_NOTIFIER_MONGO_USER}:${APP_BACKEND_NOTIFIER_MONGO_PASSWORD}@mongodb:27017/salestracker
      - TELEGRAM_API_TOKEN=${TELEGRAM_API_TOKEN}
      - REDIS_ADDR=redis
      - REDIS_PORT=6379
      - NODE_ENV=production
    links:
      - "server-mongodb:mongodb"
      - "server-redis:redis"
    depends_on:
      - server-mongodb
      - server-redis
    restart: on-failure    
    networks:
      - networks-backend-mongodb
      - networks-backend-redis

  salestracker.eu-processor:
    container_name: salestracker.eu-processor
    image: salestracker/salestracker.eu-processor:latest
    volumes:
      - ./.data/uploads/:/usr/src/app/uploads/
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - MONGODB_URI=mongodb://${APP_BACKEND_PROCESSOR_MONGO_USER}:${APP_BACKEND_PROCESSOR_MONGO_PASSWORD}@mongodb:27017/salestracker
      - REDIS_ADDR=redis
      - REDIS_PORT=6379
      - NODE_ENV=production
    links:
      - "server-elasticsearch:elasticsearch"
      - "server-mongodb:mongodb"
      - "server-redis:redis"
    depends_on:
      - server-elasticsearch
      - server-mongodb
      - server-redis
    restart: on-failure
    networks:
      - networks-backend-elasticsearch
      - networks-backend-mongodb
      - networks-backend-redis

  server-mongodb:
    container_name: server-mongodb
    image: mongo:latest
    restart: on-failure
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - APP_WEB_ADMIN_MONGO_USER=${APP_WEB_ADMIN_MONGO_USER}
      - APP_WEB_ADMIN_MONGO_PASSWORD=${APP_WEB_ADMIN_MONGO_PASSWORD}
      - APP_WEB_PUBLIC_MONGO_USER=${APP_WEB_PUBLIC_MONGO_USER}
      - APP_WEB_PUBLIC_MONGO_PASSWORD=${APP_WEB_PUBLIC_MONGO_PASSWORD}
      - APP_BACKEND_FINDER_MONGO_USER=${APP_BACKEND_FINDER_MONGO_USER}
      - APP_BACKEND_FINDER_MONGO_PASSWORD=${APP_BACKEND_FINDER_MONGO_PASSWORD}
      - APP_BACKEND_HARVESTER_MONGO_USER=${APP_BACKEND_HARVESTER_MONGO_USER}
      - APP_BACKEND_HARVESTER_MONGO_PASSWORD=${APP_BACKEND_HARVESTER_MONGO_PASSWORD}
      - APP_BACKEND_JANITOR_MONGO_USER=${APP_BACKEND_JANITOR_MONGO_USER}
      - APP_BACKEND_JANITOR_MONGO_PASSWORD=${APP_BACKEND_JANITOR_MONGO_PASSWORD}
      - APP_BACKEND_NOTIFIER_MONGO_USER=${APP_BACKEND_NOTIFIER_MONGO_USER}
      - APP_BACKEND_NOTIFIER_MONGO_PASSWORD=${APP_BACKEND_NOTIFIER_MONGO_PASSWORD}
      - APP_BACKEND_PROCESSOR_MONGO_USER=${APP_BACKEND_PROCESSOR_MONGO_USER}
      - APP_BACKEND_PROCESSOR_MONGO_PASSWORD=${APP_BACKEND_PROCESSOR_MONGO_PASSWORD}
      - APP_MONGO_DB=${APP_MONGO_DB}
    networks:
      - networks-backend-mongodb
    healthcheck:
      test:
        - CMD
        - mongo
        - --eval
        - "db.adminCommand('ping')"
    volumes:
      - "./.data/mongodb:/data/db"
      - "./config/bootstrap/mongodb/:/docker-entrypoint-initdb.d/"
    ports:
      - "27017:27017"

  server-redis:
    container_name: server-redis
    image: redis
    restart: on-failure
    networks:
      - networks-backend-redis
    volumes:
      - ./.data/redis:/data
    ports:
      - "6379:6379"

  server-elasticsearch:
    image: elasticsearch:6.4.2
    restart: on-failure
    container_name: server-elasticsearch
    command: elasticsearch -Ecluster.name=salestracker -Ebootstrap.memory_lock=true -Ehttp.port=9200 -Ehttp.cors.allow-origin="http://localhost:1358" -Ehttp.cors.enabled=true -Ehttp.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization -Ehttp.cors.allow-credentials=true
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - networks-backend-elasticsearch
    volumes:
      - ./.data/elasticsearch:/usr/share/elasticsearch/data
    healthcheck:
        test: curl -s https://localhost:9200 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 60s

networks:
  networks-backend-elasticsearch:
  networks-backend-mongodb:
  networks-backend-redis:

volumes:
  web-admin-modules:
  web-admin-public:
  web-public-modules:
  web-public-public:
  backend-janitor-modules:
  backend-notifier-modules:
